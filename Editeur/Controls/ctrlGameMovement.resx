<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="picRemove.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        vvv+E/gPsDCSE0m84nkAAAAASUVORK5CYII=
</value>
  </data>
</root>